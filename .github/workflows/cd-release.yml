name: Kestressl Production

on:
  workflow_dispatch:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  #DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
  #DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
  #DOCKER_REGISTRY: cloud.canister.io:5000
  #DOCKER_REGISTRY_NAMESPACE: cloud.canister.io:5000/efaruk
  #IMAGE_NAME: kestressl
  #CONTAINER_NAME: kestressl
  ##HOST_PORT: 80
  #VIRTUAL_HOST: "kestressl.org, www.kestressl.org"
  #LETSENCRYPT_HOST: "kestressl.org, www.kestressl.org"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
        #cache: true
    - name: Set Build Configuration to Release and Branch to main
      run: |
        echo "BUILD_CONFIGURATION=Release" >> $GITHUB_ENV
        echo "BRANCH=main" >> $GITHUB_ENV
    - name: Build & Test & Publish
      shell: bash
      run: |
        cd src/Kestressl.Website.Server
        libman restore 
        cd ../..
        dotnet restore kestressl-all.sln
        dotnet build kestressl-all.sln -c ${{ env.BUILD_CONFIGURATION }}
        dotnet test kestressl-all.sln --no-build --no-restore --verbosity normal
        dotnet pack --configuration Release ./src/Kestressl/Kestressl.csproj --no-build --no-restore --verbosity normal
        dotnet nuget push ./src/Kestressl/bin/Release/*.nupkg -k $NUGET_AUTH_TOKEN -s https://api.nuget.org/v3/index.json
        #if [[ ${{ env.BRANCH }} == main ]] || [[ ${{ env.BRANCH }} == development ]]; then
        #  dotnet publish ./src/Kestressl.Website.Server/Kestressl.Website.Server.csproj -c ${{ env.BUILD_CONFIGURATION }} --verbosity minimal -o ./docker/publish
        #  cd docker
        #  docker login --username=$DOCKER_REGISTRY_USERNAME --password=$DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY
        #  docker build -t $IMAGE_NAME .
        #  docker tag $IMAGE_NAME $DOCKER_REGISTRY_NAMESPACE/$IMAGE_NAME:$GITHUB_RUN_NUMBER
        #  docker tag $IMAGE_NAME $DOCKER_REGISTRY_NAMESPACE/$IMAGE_NAME:latest
        #  #docker push $DOCKER_REGISTRY_NAMESPACE/$IMAGE_NAME:$GITHUB_RUN_NUMBER
        #  rm -rf ./publish &>/dev/null || true
        #fi

  #deploy:
  #  runs-on: [ self-hosted, linux, kestressl, prod ]
  #  needs: build
  #  steps:
  #    - name: Deploy Docker Image to Production
  #      shell: bash
  #      run: |
  #        docker container prune &>/dev/null || true
  #        docker images prune -a &>/dev/null || true
  #        #docker pull $DOCKER_REGISTRY_NAMESPACE/$IMAGE_NAME:$GITHUB_RUN_NUMBER
  #        docker stop -t 60 $CONTAINER_NAME &>/dev/null || true
  #        docker rm -f $CONTAINER_NAME &>/dev/null || true
  #        docker rmi -f $DOCKER_REGISTRY_NAMESPACE/$IMAGE_NAME &>/dev/null || true
  #        #docker run -v $CONTAINER_NAME_storage:/app/storage -p 80:80 -p 443:443 --name $CONTAINER_NAME --hostname $CONTAINER_NAME --restart=unless-stopped -d $DOCKER_REGISTRY_NAMESPACE/$IMAGE_NAME:$GITHUB_RUN_NUMBER
  #        docker run -v $CONTAINER_NAME_storage:/app/storage --name $CONTAINER_NAME --restart=unless-stopped -d \
  #          -e "VIRTUAL_HOST=$VIRTUAL_HOST" \
  #          -e "LETSENCRYPT_HOST=$LETSENCRYPT_HOST" \
  #          $DOCKER_REGISTRY_NAMESPACE/$IMAGE_NAME:$GITHUB_RUN_NUMBER
  #    - name: Notify Telegram
  #      uses: appleboy/telegram-action@master
  #      with:
  #        to: ${{ secrets.TELEGRAM_TO }}
  #        token: ${{ secrets.TELEGRAM_TOKEN }}
  #        message: "Production environment has been updated: https://kestressl.org/"
